#!/bin/bash
CONFIG_DIR=./config
HOOKS_DIR=./hooks

red=`tput setaf 1`
green=`tput setaf 2`
cyan=`tput setaf 6`
reset=`tput sgr0`
indent() {
    echo -en "    "
}
print() {
    echo -e $@$reset
}
step() {
    print "$green$@"
}
info() {
    print "$cyan$@"
}
error() {
    print "$red$@"
}
get_confirmation() {
    print -n $cyan"Do you want to continue?$reset [y/N] "
    read CONFIRM

    if [ "$CONFIRM" == "y" ]
    then
        return 1
    fi
    return 0
}

_run_hooks() {
    for hook in $HOOKS_DIR/*
    do
        indent
        info "Executing:$reset $hook"
        source $hook
        if [ "$?" != "0" ]
        then
            print "Aborting script execution (one of the hooks failed)."
            exit 1
        fi
    done
}

_efibootmgr_envsetup() {
    EFIBOOTMGR="efibootmgr"
    if [ "`whoami`" != "root" ]
    then
        EFIBOOTMGR="sudo efibootmgr"
    fi
        
    EFIBOOTMGR_CMDLINE="--disk $ESP_DISK --part $ESP_PARTITION_ID "
    EFIBOOTMGR_CMDLINE+="--create "
    EFIBOOTMGR_CMDLINE+="--label \"$BOOT_ENTRY_LABEL\" "
    EFIBOOTMGR_CMDLINE+="--loader $KERNEL_PATH "
    EFIBOOTMGR_CMDLINE+="--unicode \"$KERNEL_PARAMETERS\" "
    EFIBOOTMGR_CMDLINE+="--verbose "
    EFIBOOTMGR_CMDLINE+="$CUSTOM_EFIBOOTMGR_CMDLINE"
}

_display_summary() {
    step "Summary"
    indent && info "Label:$reset\t\t $BOOT_ENTRY_LABEL"
    indent && info "Kernel:$reset\t\t $KERNEL_PATH"
    indent && info "Kernel args:$reset\t $KERNEL_PARAMETERS"
    indent && info "efibootmgr args:$reset\t $EFIBOOTMGR_CMDLINE"
}

_create() {
    step "Loading the configuration file"
    source $CONFIG_DIR/entry

    step "Running hooks"
    _run_hooks
    _efibootmgr_envsetup

    _display_summary
    indent && get_confirmation "Do you want to add this entry?"
    if [ $? == 0 ]
    then
        error "Canceled by the user."
        return 0
    fi

    if [ "$BUILD_IMAGE" == "yes" ]
    then
    
        info "Creating a combined EFI binary"        
        objcopy \
            --add-section .osrel="/etc/os-release"                          \
                --change-section-vma .osrel=0x20000                         \
            --add-section .cmdline=<(echo -n "${KERNEL_PARAMETERS}")        \
                --change-section-vma .cmdline=0x30000                       \
            --add-section .linux="$KERNEL_PATH"                             \
                --change-section-vma .linux=0x2000000                       \
            --add-section .initrd=<(cat "${MICROCODE_PATH}" "${INITRD_FILENAME}") \
                --change-section-vma .initrd=0x3000000                      \
            "${EFISTUB_LOCATION}" "${EFI_IMAGE_OUTPUT}"
        
    else
    
        info "Adding the entry using efibootmgr"
        $EFIBOOTMGR $EFIBOOTMGR_CMDLINE
        
    fi
}

_simulate() {
    step "Loading the configuration file"
    source $CONFIG_DIR/entry

    step "Running hooks"
    _run_hooks
    
    _efibootmgr_envsetup

    _display_summary
}

_help() {
    indent && step "help:$reset self-explanatory"
    indent && step "create:$reset creates an EFI entry"
    indent && step "simulate:$reset generates a list of kernel parameters without modifying NVRAM"
}

info "update-efi-entry"
case "$1" in
    "help")
        _help
        ;;
    "create")
        _create
        ;;
    "simulate")
        _simulate
        ;;
    "")
        _help
        ;;
    *)
        error "Unrecognized action: $1"
        _help
        ;; 
esac
